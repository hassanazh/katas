# ADR: Architecture Decision Record

## Decision Title: Architecture for MonitorMe Medical Patient Monitoring System

## Context
StayHealthy, Inc. is expanding into the medical monitoring market and requires a new medical patient monitoring system named MonitorMe. This system will monitor patients' vital signs using proprietary medical monitoring devices built by StayHealthy, Inc. The system needs to meet various requirements including reading data from different patient-monitoring equipment, analyzing vital signs, alerting medical professionals, and storing data securely.

## Decision Drivers
1. **Integration**: MonitorMe needs to integrate with different types of patient-monitoring equipment.
2. **Performance**: The system must achieve an average response time of 1 second or less for displaying vital signs on the consolidated monitoring screen.
3. **Scalability**: Each physical hospital location may have up to 500 patients, and the system should handle this load efficiently.
4. **Data Storage**: MonitorMe must record and store the past 24 hours of all vital sign readings for each patient.
5. **Reliability**: The system must continue functioning if any vital sign device or software fails.
6. **Security**: Patient monitoring data must be secure to maintain confidentiality.
7. **Future Expansion**: The architecture should allow for the addition of more vital sign monitoring devices in the future.

## Decision
We will adopt a microservices architecture for MonitorMe. This decision is based on its ability to meet the requirements effectively and efficiently.

### Components:
1. **Data Ingestion Service**: Responsible for reading data from different patient-monitoring equipment and transmitting it to the processing component.
2. **Processing Service**: Analyzes the vital signs of each patient and triggers alerts if necessary. It also handles the rotation of patient data on the consolidated monitoring screen.
3. **Storage Service**: Stores the past 24 hours of vital sign readings for each patient and provides access for medical professionals to review the history.
4. **Alerting Service**: Sends push notifications to medical professionals via the StayHealthy mobile app and displays alerts on the consolidated monitoring screen.
5. **Snapshot Generation Service**: Generates holistic snapshots of a patient's vital signs and handles the secure upload to MyMedicalData through a secure HTTP API call.

### Technologies:
- **Programming Languages**: Each microservice will be implemented using a suitable programming language, such as Java, Python, or Node.js.
- **Containers**: Docker containers will be used to package each microservice for easy deployment and scalability.
- **Message Broker**: RabbitMQ or Apache Kafka will be used as a message broker for asynchronous communication between microservices.
- **Database**: A scalable and reliable database system, such as PostgreSQL or MongoDB, will be used for storing vital sign readings.
- **API Gateway**: An API gateway will be implemented to manage and secure the communication between the frontend and backend services.

## Consequences
- **Scalability**: The microservices architecture allows for horizontal scaling of individual components to handle increased load.
- **Flexibility**: Each microservice can be developed, deployed, and scaled independently, enabling agility and faster development cycles.
- **Complexity**: Managing multiple microservices introduces complexity in deployment, monitoring, and debugging.
- **Overhead**: Communication between microservices adds network overhead, which may affect performance.
- **Resilience**: With proper design and implementation, the system can be resilient to failures in individual components, ensuring continuous operation.

## Considered Alternatives
1. **Monolithic Architecture**: This alternative was rejected due to its lack of flexibility and scalability, which may not meet the future expansion requirements of the system.
2. **Serverless Architecture**: While serverless offers scalability and reduced operational overhead, it may not be suitable for real-time processing and may introduce latency issues.

//TODO
## Date
Date of this decision: [Insert Date]

//TODO
## Status
[Accepted/Superseded/Deprecated]
